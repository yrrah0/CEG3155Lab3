// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2023 01:56:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testBench
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testBench_vlg_sample_tst(
	clk,
	ctep,
	resetn,
	sscs,
	sampler_tx
);
input  clk;
input  ctep;
input  resetn;
input  sscs;
output sampler_tx;

reg sample;
time current_time;
always @(clk or ctep or resetn or sscs)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testBench_vlg_check_tst (
	mstl,
	slct,
	sstl,
	sampler_rx
);
input [2:0] mstl;
input [1:0] slct;
input [2:0] sstl;
input sampler_rx;

reg [2:0] mstl_expected;
reg [1:0] slct_expected;
reg [2:0] sstl_expected;

reg [2:0] mstl_prev;
reg [1:0] slct_prev;
reg [2:0] sstl_prev;

reg [2:0] mstl_expected_prev;
reg [1:0] slct_expected_prev;
reg [2:0] sstl_expected_prev;

reg [2:0] last_mstl_exp;
reg [1:0] last_slct_exp;
reg [2:0] last_sstl_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	mstl_prev = mstl;
	slct_prev = slct;
	sstl_prev = sstl;
end

// update expected /o prevs

always @(trigger)
begin
	mstl_expected_prev = mstl_expected;
	slct_expected_prev = slct_expected;
	sstl_expected_prev = sstl_expected;
end


// expected mstl[ 2 ]
initial
begin
	mstl_expected[2] = 1'bX;
end 
// expected mstl[ 1 ]
initial
begin
	mstl_expected[1] = 1'bX;
end 
// expected mstl[ 0 ]
initial
begin
	mstl_expected[0] = 1'bX;
end 
// expected slct[ 1 ]
initial
begin
	slct_expected[1] = 1'bX;
end 
// expected slct[ 0 ]
initial
begin
	slct_expected[0] = 1'bX;
end 
// expected sstl[ 2 ]
initial
begin
	sstl_expected[2] = 1'bX;
end 
// expected sstl[ 1 ]
initial
begin
	sstl_expected[1] = 1'bX;
end 
// expected sstl[ 0 ]
initial
begin
	sstl_expected[0] = 1'bX;
end 
// generate trigger
always @(mstl_expected or mstl or slct_expected or slct or sstl_expected or sstl)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mstl = %b | expected slct = %b | expected sstl = %b | ",mstl_expected_prev,slct_expected_prev,sstl_expected_prev);
	$display("| real mstl = %b | real slct = %b | real sstl = %b | ",mstl_prev,slct_prev,sstl_prev);
`endif
	if (
		( mstl_expected_prev[0] !== 1'bx ) && ( mstl_prev[0] !== mstl_expected_prev[0] )
		&& ((mstl_expected_prev[0] !== last_mstl_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mstl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mstl_expected_prev);
		$display ("     Real value = %b", mstl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mstl_exp[0] = mstl_expected_prev[0];
	end
	if (
		( mstl_expected_prev[1] !== 1'bx ) && ( mstl_prev[1] !== mstl_expected_prev[1] )
		&& ((mstl_expected_prev[1] !== last_mstl_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mstl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mstl_expected_prev);
		$display ("     Real value = %b", mstl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mstl_exp[1] = mstl_expected_prev[1];
	end
	if (
		( mstl_expected_prev[2] !== 1'bx ) && ( mstl_prev[2] !== mstl_expected_prev[2] )
		&& ((mstl_expected_prev[2] !== last_mstl_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mstl[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mstl_expected_prev);
		$display ("     Real value = %b", mstl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mstl_exp[2] = mstl_expected_prev[2];
	end
	if (
		( slct_expected_prev[0] !== 1'bx ) && ( slct_prev[0] !== slct_expected_prev[0] )
		&& ((slct_expected_prev[0] !== last_slct_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port slct[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", slct_expected_prev);
		$display ("     Real value = %b", slct_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_slct_exp[0] = slct_expected_prev[0];
	end
	if (
		( slct_expected_prev[1] !== 1'bx ) && ( slct_prev[1] !== slct_expected_prev[1] )
		&& ((slct_expected_prev[1] !== last_slct_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port slct[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", slct_expected_prev);
		$display ("     Real value = %b", slct_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_slct_exp[1] = slct_expected_prev[1];
	end
	if (
		( sstl_expected_prev[0] !== 1'bx ) && ( sstl_prev[0] !== sstl_expected_prev[0] )
		&& ((sstl_expected_prev[0] !== last_sstl_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sstl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sstl_expected_prev);
		$display ("     Real value = %b", sstl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sstl_exp[0] = sstl_expected_prev[0];
	end
	if (
		( sstl_expected_prev[1] !== 1'bx ) && ( sstl_prev[1] !== sstl_expected_prev[1] )
		&& ((sstl_expected_prev[1] !== last_sstl_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sstl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sstl_expected_prev);
		$display ("     Real value = %b", sstl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sstl_exp[1] = sstl_expected_prev[1];
	end
	if (
		( sstl_expected_prev[2] !== 1'bx ) && ( sstl_prev[2] !== sstl_expected_prev[2] )
		&& ((sstl_expected_prev[2] !== last_sstl_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sstl[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sstl_expected_prev);
		$display ("     Real value = %b", sstl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sstl_exp[2] = sstl_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testBench_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg ctep;
reg resetn;
reg sscs;
// wires                                               
wire [2:0] mstl;
wire [1:0] slct;
wire [2:0] sstl;

wire sampler;                             

// assign statements (if any)                          
testBench i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.ctep(ctep),
	.mstl(mstl),
	.resetn(resetn),
	.slct(slct),
	.sscs(sscs),
	.sstl(sstl)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// ctep
always
begin
	ctep = 1'b0;
	ctep = #100000 1'b1;
	#100000;
end 

// resetn
initial
begin
	resetn = 1'b1;
end 

// sscs
always
begin
	sscs = 1'b0;
	sscs = #50000 1'b1;
	#50000;
end 

testBench_vlg_sample_tst tb_sample (
	.clk(clk),
	.ctep(ctep),
	.resetn(resetn),
	.sscs(sscs),
	.sampler_tx(sampler)
);

testBench_vlg_check_tst tb_out(
	.mstl(mstl),
	.slct(slct),
	.sstl(sstl),
	.sampler_rx(sampler)
);
endmodule

